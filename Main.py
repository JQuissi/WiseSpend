import streamlit as st
import mysql.connector
from streamlit_option_menu import option_menu
import streamlit.components.v1 as components
from io import BytesIO
from PIL import Image
import pandas as pd
from datetime import datetime, timedelta

# Fun√ß√£o para criar tabela de usu√°rio se n√£o existir
def criar_tabela_usuario(conn):
        cursor = conn.cursor()
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS usuario (
                id INT AUTO_INCREMENT PRIMARY KEY,
                nome_usuario VARCHAR(50) NOT NULL,
                senha VARCHAR(50) NOT NULL
            )
        """)
        conn.commit()


# Fun√ß√£o para realizar o login
def login(conn):
    st.sidebar.header("Login")
    nome_usuario = st.sidebar.text_input("Nome de Usu√°rio:")
    senha = st.sidebar.text_input("Senha:", type="password")

    if st.sidebar.button("Entrar"):
        if verificar_credenciais(conn, nome_usuario, senha):
            st.sidebar.success("Login bem-sucedido!")
            st.session_state['connection_established'] = True
        else:
            st.sidebar.error("Falha no login. Verifique suas credenciais.")
            st.session_state['connection_established'] = False         
            

# Fun√ß√£o para cadastrar novo usu√°rio
def cadastrar_usuario(conn, nome_usuario, senha):
    cursor = conn.cursor()
    cursor.execute("""
        INSERT INTO usuario (nome_usuario, senha) VALUES (%s, %s)
    """, (nome_usuario, senha))
    conn.commit()
    return True

# Fun√ß√£o para verificar credenciais de login
def verificar_credenciais(conn, nome_usuario, senha):
    cursor = conn.cursor()
    cursor.execute("""
        SELECT * FROM usuario WHERE nome_usuario = %s AND senha = %s
    """, (nome_usuario, senha))
    return cursor.fetchone() is not None    


def compartilhar_dicas_e_experiencias(conn):
    st.title('Dicas de Sustentabilidade')
    
    # Adicionando st.radio para a escolha do usu√°rio
    opcao = st.radio("Escolha uma op√ß√£o:", ["Consultar Dicas e Experi√™ncias", "Cadastrar Dicas e Experi√™ncias"])

    # Verificar se o usu√°rio fez uma escolha
    if opcao:
        # Se a op√ß√£o for "Consultar Dicas e Experi√™ncias"
        if opcao == "Consultar Dicas e Experi√™ncias":     
            cursor = conn.cursor()
            cursor.execute("SELECT categoria, titulo_dica, desc_dica, data FROM dicas")
            dicas = cursor.fetchall()
            cursor.close()

            st.header('Consultar Dicas e Experi√™cias')

            # Converter para DataFrame do pandas
            colunas = ['Categoria', 'Titulo_Dica', 'Desc_Dica', 'Data']
            df_dicas = pd.DataFrame(dicas, columns=colunas)

            # Filtrar por categoria (multiselect)
            categorias_selecionadas = st.multiselect('Selecione as Categorias:', df_dicas['Categoria'].unique())

            # Adicionar filtro de intervalo de tempo
            intervalo_dias = st.slider('Selecione o Intervalo de Tempo (Dias):', 1, 30, 7)
            data_inicio = datetime.now() - timedelta(days=intervalo_dias)

            # Filtrar as dicas com base nas categorias selecionadas e no intervalo de tempo
            df_dicas = df_dicas[(df_dicas['Categoria'].isin(categorias_selecionadas)) & (df_dicas['Data'] >= data_inicio.date())]

            # Exibir dicas das categorias selecionadas e intervalo de tempo
            categorias_str = ', '.join(map(str, categorias_selecionadas))  # Converter lista para string
            st.subheader(f'Dicas das Categorias: {categorias_str} nos √∫ltimos {intervalo_dias} dias')

            # Filtrar por palavra-chave
            palavra_chave = st.text_input('Digite uma Palavra-chave para Filtrar:', '')
            if palavra_chave:
                df_dicas = df_dicas[df_dicas['Titulo_Dica'].str.contains(palavra_chave, case=False) | df_dicas['Desc_Dica'].str.contains(palavra_chave, case=False)]

            # Exibir as dicas em uma lista
            for _, row in df_dicas.iterrows():
                st.write(f'**{row["Categoria"]} - {row["Titulo_Dica"]}**')
                st.write(row["Desc_Dica"])
                st.write("---")
        # Se a op√ß√£o for "Cadastrar Dicas e Experi√™ncias"
        elif opcao == "Cadastrar Dicas e Experi√™ncias":
            st.header('Cadastrar/Compartilhar Dicas e Experi√™ncias')

            # Adicionar campos para o cadastro de dica
            categoria = st.text_input('Categoria:')
            titulo_dica = st.text_input('T√≠tulo da Dica:')
            desc_dica = st.text_area('Descri√ß√£o da Dica:')
            data = datetime.now().date()  # Data atual

            # Adicionar bot√£o para salvar a dica
            if st.button('Compartilhar Dica'):
                cursor = conn.cursor()
                cursor.execute("INSERT INTO dicas (categoria, titulo_dica, desc_dica, data) VALUES (?, ?, ?, ?)", (categoria, titulo_dica, desc_dica, data))
                conn.commit()
                cursor.close()
                st.success('Dica compartilhada com sucesso!')




def home():
    st.header("Bem-vindo ao WiseSpend!")
    st.subheader("Transformando Tecnologia em Sustentabilidade Ambiental")
    
    st.markdown("Explore o futuro sustent√°vel, onde a tecnologia se une √† preserva√ß√£o do meio ambiente.")
    st.markdown("Descubra como voc√™ pode fazer a diferen√ßa, adotando pr√°ticas eco-friendly no seu dia a dia.")

    st.markdown("üåø Monitoramento de Consumo Energ√©tico")

    text1 = '''Visualize e compreenda seu consumo de energia. 
            Identifique padr√µes de uso, reduza o desperd√≠cio e tome o controle para uma vida mais eficiente e sustent√°vel.'''
    st.markdown(text1)

    st.markdown("‚ôªÔ∏è Gerenciamento de Res√≠duos")
    text2 = '''Acompanhe seus h√°bitos de gera√ß√£o de res√≠duos. 
            Receba dicas personalizadas de reciclagem e redu√ß√£o para minimizar seu impacto no planeta.'''
    st.markdown(text2)

    st.markdown("üéÆ M√≥dulo Recompensas Sustent√°veis")
    text3 = '''Adote pr√°ticas sustent√°veis e seja recompensado! 
            Participe da gamefica√ß√£o para reduzir seu consumo energ√©tico.'''
    st.markdown(text3)

    st.markdown("ü§ù Compartilhamento de Dicas e Experi√™ncias")
    text4 = '''Conecte-se com outros usu√°rios, compartilhe dicas e experi√™ncias sustent√°veis. 
            Juntos, promovemos a colabora√ß√£o e aprendizado m√∫tuo para um futuro mais verde.'''
    st.markdown(text4)

    st.markdown("üìä An√°lise de Dados e Relat√≥rios")
    text5 = '''Avalie seu progresso de maneira intuitiva. 
            Analise dados sobre sua redu√ß√£o de consumo e emiss√µes para entender o impacto positivo que voc√™ est√° fazendo no mundo.'''
    st.markdown(text5)

    st.markdown("Fa√ßa parte da revolu√ß√£o verde!")
    st.markdown("Embarque na jornada rumo a um futuro mais sustent√°vel. Cada pequena a√ß√£o conta! üåç‚ú®")
    
# Fun√ß√£o para a p√°gina inicial
def inicial_page(conn):  
    # Barra lateral para adicionar novas dicas
    st.sidebar.header("WiseSpend")    
    st.sidebar.header("Bem-vindo ao nosso sistema. Fa√ßa o login.")
    
    opcao = st.sidebar.radio("Escolha uma op√ß√£o:", ["Login", "Cadastro"])
    
    if opcao == "Cadastro":
        st.sidebar.header("Cadastro de Novo Usu√°rio")
        novo_usuario = st.sidebar.text_input("Nome de Usu√°rio:")
        nova_senha = st.sidebar.text_input("Senha:", type="password")

        if st.sidebar.button("Cadastrar"):
            if cadastrar_usuario(conn, novo_usuario, nova_senha):
                st.sidebar.success("Usu√°rio cadastrado com sucesso!")
            else:
                st.sidebar.error("Erro ao cadastrar usu√°rio. Tente novamente.")

    elif opcao == "Login":
        login(conn)  # Chama a fun√ß√£o de login


# Interface do Streamlit
def main():
    # Conectar ao banco de dados MySQL
    conn = mysql.connector.connect(
        host='localhost',
        port=3306,
        user='root',
        database='wisespend'
    )
    criar_tabela_usuario(conn)
    
    # P√°gina inicial
    inicial_page(conn)

    # Verifica se a conex√£o foi estabelecida
    if 'connection_established' not in st.session_state or not st.session_state.connection_established:
        return  # Se n√£o houver conex√£o estabelecida, encerra a execu√ß√£o

    # P√°gina principal
    selected_option = option_menu(None, ["Home", "Consumo Energ√©tico", "Gerenciamento de Res√≠duos", "Recompensas Sustent√°veis", "Dicas e Experi√™ncias", "Relat√≥rios"], 
        icons=['house', 'plug', '', 'balloon', 'lightbulb', 'bar-chart-line'], 
        menu_icon="cast", default_index=0, orientation="horizontal")
        
    # Conte√∫do da tela principal
    if selected_option == "Home":
        home()
    elif selected_option == "Consumo Energ√©tico":
        st.header("Consumo Energ√©tico") 
    elif selected_option == "Gerenciamento de Res√≠duos":
        st.header("Gerenciamento de Res√≠duos") 
    elif selected_option == "Recompensas Sustent√°veis":
        st.header("Recompensas Sustent√°veis") 
    elif selected_option == "Dicas e Experi√™ncias":
        compartilhar_dicas_e_experiencias(conn) 
    elif selected_option == "Relat√≥rios":
        st.header("Relat√≥rios") 
    
if __name__ == "__main__":
    main()

